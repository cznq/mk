'use strict'
// const slice = [].slice;
function isFunction(value) { return typeof(value) == "function" }
function isObject(obj)     { return typeof(obj) == "object" }
function isPlainObject(obj) {
  return isObject(obj) && Object.getPrototypeOf(obj) == Object.prototype
}
let isArray = Array.isArray ||
      function(object){ return object instanceof Array }

let CALLBACK_ID = 0,
    eurl = encodeURIComponent,
    doc = document,
    win = window,
    cacheName = 'bridgeForVueFnCache',
    emptyFn = function () {},
    FUNCTION_CACHE = {};
function processFn(callback, props){
    CALLBACK_ID++;
    var fnname  = props.cbcache ? props.cbcache + 'API_CACHE' : (cacheName + CALLBACK_ID),
        fntype = typeof callback;
    if(fntype === "function"){
        FUNCTION_CACHE[fnname] = callback;
    }else if(fntype === 'string'){
        var cbList = callback.split('.'),
            cbVars;
        for (var i = 0; i < cbList.length; i++) {
            if(i === 0){
                cbVars = win[cbList[i]];
            }else if(Object.prototype.toString.call(cbVars) === "[object Object]"){
                cbVars = cbVars[cbList[i]]
            }else{
                cbVars == false;
                break;
            }
            if(!cbVars){
                break;		
            }
        };
        FUNCTION_CACHE[fnname] = typeof cbVars === 'function' ? cbVars : emptyFn;
    }//arguments

    if (props.cbcache) {
        return [props.cbcache, 'API_CACHE']
    } else {
        return [cacheName, CALLBACK_ID];
    }
}
function loadURL(url) {  
    let iframe = doc.createElement("iframe");
    iframe.style.display = "none";
    iframe.src = url;
    let cont = doc.body || doc.documentElement;
    cont.appendChild(iframe);

    setTimeout(function(){
        iframe.parentNode.removeChild(iframe);
        iframe = null;
    }, 200);
}
function getEasyJsUrl(obj, functionName, args) {
    let argStr =  ":s" + eurl(':'+ eurl(args));
    loadURL("easy-js:" + obj + ":" + eurl(functionName + ":") + argStr);
}


const ua = navigator.userAgent.toLowerCase();
let bridge = {
    isArray,
    isFunction,
    isObject:isPlainObject,
    init (){
        bridge = { ...this.getUA(),...bridge, appver:this.getAppVersion(),cacheName:this.cacheName,sendAction:this.sendAction}
    },
    cacheName (a,b){
        return a +'_cbcachemark_' + b;
    },
    getAppVersion (){
        return (function(){
            var verInt = 0,
                verMatch = ua.match(/tctravel\/([\d\.]+)/i);
            if(!!verMatch && verMatch.length >= 2){
                var verStr = verMatch[1].split(".");
                if (verStr.length == 2) {
                    verStr.push(0);
                }
                if (verStr.length == 3){  //
                    verInt = parseInt(verStr.join(""));
                }
            }
            return verInt
        })();
    },
    isAppVersionGreatThan (minVer){
        return bridge.appver >= minVer && minVer > 0;
    },
    getUA (){
        let system,platform;
        if(!ua.match(/ipad|iphone|android|blackberry|windows phone|webos/i)){
            system = 3 // pc
        }else{
            if (ua.indexOf('iphone') > -1 || ua.indexOf('ipad') > -1) {
                system = 1;// iPhone
            }else if (ua.indexOf('android') > -1) {
                system = 2;// Android
            }else {
                system = 4 //windows phone  + other
            }
        }
        if (ua.indexOf("tctravel") != -1) {
            platform = 'tc';
        }else if (ua.indexOf("micromessenger") != -1) {
            platform = 'wx';
        }else if (ua.indexOf("qq/") != -1) {
            platform = 'sq';
        }else{
            platform = system !== 3 ? 'touch':'pc';
        }
        return {
            system:system,platform:platform
        }
    },
    createParam (param){
        let fnarr = processFn(param.callback,param);
        param.CBPluginName = fnarr[0]
        param.CBTagName = fnarr[1];
        param.param = param.param || {};

        if(param && param.param && param.param.reqbody){
            let data = JSON.stringify(param.param.reqbody);
            param.param.reqbody = data.substring(1, data.length - 1)
        }
        return {
            ...param,
            version:param.version,
        };
    },
    sendAction (param,dfn,cfn){
        if(!param){return}
        param = this.createParam(param);
        
        if(this.versionContrast(param.version,param.av)){
         
            try{
                delete param.callback;
                delete param.version;
            }catch(e){}
            if(bridge.system == 1){
                getEasyJsUrl(dfn, cfn, this.stringifyAndEncode(param));
            }else if(bridge.system == 2){
                var sendStr = this.stringifyAndEncode(param,(param.uncode && this.isAppVersionGreatThan(param.uncode)));
                win[dfn] && win[dfn][cfn] && win[dfn][cfn](sendStr);
            }else{
                console.warn('bridge connect failed')
            }
        }else if(param.notSupport){
            param.notSupport(param)
        }else{
            console.warn('app version is not support')
        }
    },
    versionContrast (v,av){
        let ver = this.system == 2 && av ? av : v;
        return this.isAppVersionGreatThan(ver);
    },
    stringifyAndEncode (jsonObj,notcode) {
        try{
            let val = JSON.stringify(jsonObj);
            if(!notcode){
                val = encodeURIComponent(val)
            }
            return val;
        }catch(e){
            return '';
        }
    },
    decodeAndParse (jsonStr) {
        try{
            return JSON.parse(decodeURIComponent(jsonStr))
        }catch(e){
            return {};
        }
    },
    registerFn(p,config,dfn){
        for(let item in config){
            const vals = config[item],
                name = vals.n, // 底层的协议名

                ep = vals.ep; //是否可为空
            p[item] = function (param){
                if(!param && !ep){
                    return;
                }
                if(bridge.platform == 'tc'){
                   return new Promise(function(resolve, reject){
                        //let callback = param.callback;
                        
                        function promiseCB(a){
                            resolve(a)
                        }
                        bridge.sendAction({
                            param:{
                                ...param
                            },
                            cbcache:vals.cbcache, //方法是否缓存(如设置头部，回调需要保持)
                            uncode:vals.uncode, //是否编码
                            callback:promiseCB,
                            notSupport:vals.notSupport,
                            version:vals.v, //客户端支持的版本
                            av:vals.av  //安卓支持的版本
                        },dfn,name);
                            //reject(error);
                    });
                    
                }else{
                    console.warn('not in tctravel app')
                    return new Promise(function(resolve, reject){});
                }
            }
        }
    },
    isObjectValueEqual
}

function isObjectValueEqual(a, b) {
    
    let aProps = Object.getOwnPropertyNames(a),
        bProps = Object.getOwnPropertyNames(b),
        types = ['object']
 
    if (aProps.length != bProps.length) {
        return false;
    }
    for (var i = 0; i < aProps.length; i++) {
        var propName = aProps[i],
            list1 = a[propName],
            list2 = b[propName];
        if(isObject(list1)){
            if(!isObject(list2)){return false}
            if(!isObjectValueEqual(list1,list2)){
                return false;
            }
        }else if(isArray(list1)){
            if(!isArray(list2)){return false}
            if(isArrayValueEqual(list1,list2) === false){
                return false;
            }
        }
        if (list1 !== list2) {
            return false;
        }
    }
    return true;
}
function isArrayValueEqual(a,b){
    if(a.length !== b.length){
        return false;
    }
    //a.every 兼容如何？ 
    for(let i = 0;i < a.length; i++){
        let list1 = a[i],
            list2 = b[i]
        if(isObject(list1)){
            if(!isObject(list2)){return false}
            if(!isObjectValueEqual(list1,list2)){
                return false;
            }
        }else if(isArray(list1)){
            if(!isArray(list2)){return false}
            if(isArrayValueEqual(list1,list2) === false){
                return false;
            }
        }else if(b[i] !== a[i]){
            return false
        }
    }
}

bridge.init()
window._tc_bridge_public = {};
window._tc_bridge_public.ntvCB = function (json,pass){
    if (json) {
        var cbObj =  Object.prototype.toString.call(json) === "[object Object]" ? json : bridge.decodeAndParse(json),
            fnmame = cbObj.pluginname + cbObj.tagname,
            callback = FUNCTION_CACHE[fnmame];
        json = cbObj;
        if (!!cbObj.cacheKey){
            let cacheValue = Android.getCacheByKey(cbObj.cacheKey);
            if (!!cacheValue) {
                let cachecbObj = JSON.parse(cacheValue);
                cbObj.param = cachecbObj.param;
            }
        }
        if(bridge.closeCache){
            bridge.closeCache(json.param);
        }
        if(!callback){
            callback = window[cbObj.pluginname];
            callback = callback ? callback[cbObj.tagname] : false;
            if(!callback){
                if(pass === 'catch'){
                    return
                }
                setTimeout(function(){
                    _tc_bridge_public.ntvCB(json,'catch')
                },10)
            }else{
                callback && callback(cbObj.param)
            }


        }else{
            callback(cbObj.param);
            if(fnmame.indexOf('_cbcachemark_') === -1){
                delete FUNCTION_CACHE[fnmame];
            }
        }
    }
}
export default bridge;