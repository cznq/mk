import bridge from './bridge.js'

var urls = (function() {
    var url = window.location.href.split('?')[1] || "";
    var params = {},
        i, j;
    url = url.replace(/#.*$/, '').split("&");
    for (i = 0, j = url.length; i < j; i++) {
        var num = url[i].indexOf("=");
        if (num > 0) {
            var key = decodeURIComponent(url[i].substring(0, num));
            var val = url[i].substr(num + 1) || "";
            try {
                val = decodeURIComponent(val);
            } catch (ex) {}
            params[key] = val;
        }
    }
    return params;
})();

function getUserInfo(login, objs = {}) { // login == true  表示获取不到 则登录or授权
    var ltype = objs.logintype || 0,
        wxname = objs.wxname || 0,
        returnHref = objs.returnHref || location.href,
        wxloginpass = bridge.platform == 'wx' && ltype !== 'touch' && (ltype === 'wx' || ['wx.17u.cn','wx.t.17u.cn','wx.qa.17u.cn'].indexOf(location.hostname) !== -1 || urls.logintype === 'wx'); //是否启用微信授权

    if (wxloginpass) {
        var wxuser = serializeLoginInfo((bridge.cookie("WxUser") || bridge.cookie("us") || '').split("&")),
            cuser = serializeLoginInfo((bridge.cookie("CooperateWxUser") || '').split("&")),
            urlobjs = { openid: urls.openid || urls.code, HeaderImgUrl: urls.imgurl, nickName: urls.nickname };

        urlobjs =  { ...wxuser, ...cuser, ...urlobjs };

        if (!wxuser.openid && urlobjs.openid) { //已授权情况，cookie中没有 写入cookie
            var t = new Date();
            t.setTime(+t + 30*864e+5); //30天过期
            bridge.cookie('WxUser', 'openid=' + urlobjs.openid + '&HeaderImgUrl=' + (urlobjs.HeaderImgUrl || '') + '&nickName=' + (urlobjs.nickName || ''), {
                    domain: location.host,
                    path: '/',
                    expires: 30
                })
        }
        function openweixin() {
            if (!login) {//如果不需要强制登录 则不授权
                return;
            }
            location.href = 'https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx3827070276e49e30&redirect_uri=' +
                encodeURIComponent('http://wx.17u.cn/flight/' + (wxname ? 'getwxuserinfo' : 'getopenid') + '.html?url=' +
                    encodeURIComponent(returnHref)) + '&showwxpaytitle=1&response_type=code&scope=snsapi_' + (wxname ? 'userinfo' : 'base') + '&state=123#wechat_redirect';
        }

        if (!urlobjs.openid) { // 未获取到微信登录信息 调用授权
            openweixin();
            return false;
        }

        if (wxname && (!!wxname != !!urlobjs.nickName)) { //授权默认只获取openid，如果需要名称和头像，信息中没有 需要授权获取
            openweixin()
            return false;
        }

        return urlobjs;
    }

    var cnUserCookie = serializeLoginInfo((bridge.cookie("cnUser") || bridge.cookie("us") || '').split("&")); //用户信息
        // otherUser = serializeLoginInfo((bridge.cookie("passport_login_state") || '').split("&")); //联盟账号
    var userId = cnUserCookie.userid;
        // tUserName = otherUser.partner_loginname;

    if (!userId && login) {  //获取不到信息 需要跳转 登录
        location.href = 'https://passport.ly.com/m/login.html?returnUrl=' + encodeURIComponent(location.href);
        return false;
    } else {
        return cnUserCookie;
    }
}

function serializeLoginInfo(info) {
    var loginInfo = {};
    for (var i = 0; i < info.length; i++) {
        var item = info[i];
        if (!item) {
            continue;
        }
        item = item.split('=');
        if (item.length) {
            loginInfo[item[0]] = item[1]
        }
    }
    return loginInfo
}

function createMemberInfo(userinfo = {}){
    return {
            memberInfo: {
                mobile: userinfo.Mobile || userinfo.mobile || '',
                loginName: '',
                openid: userinfo.openid,
                HeaderImgUrl: userinfo.HeaderImgUrl,
                UserName: (userinfo.nickName || userinfo.NickName),
                email: '',
                trueName: '',
                memberId: userinfo.userid
            }
        }
}
let localHelper = bridge.localHelper;
let user = {
    userLogin:function(param){
        return new Promise(function(resolve, reject){
            resolve( bridge.buildCBData(createMemberInfo(getUserInfo(true,param)) ) )
        })
    },
    getDeviceInfo:function(param){
        return new Promise(function(resolve, reject){
            
            let userinfo = getUserInfo(false,param),
                deviceid = localHelper.get('4in1deviceId');
            if (!deviceid) {//如果没获取到 则 设置一个
                deviceid = bridge.guid()
                localHelper.set('4in1deviceId', deviceid)
            }
            resolve( bridge.buildCBData({
                deviceInfo: {
                        appVersionNumber: "0",
                        appVersionType: "touch",
                        deviceId: deviceid,
                        deviceidType: 'guid',
                        extend: "",
                        pushInfo: "",
                        refid: (window.getRefid ? window.getRefid() : '')
                    },
                    ...createMemberInfo(userinfo)
            }) )
        })
    }
}
 
export default user;