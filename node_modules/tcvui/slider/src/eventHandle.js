let eventObj = {
    _isUpdateEnd:true
};
export default {
    
    CarouselTouchStart (event){
        event.preventDefault();
        this.stopSlider();

        let et = event.touches[0];
        eventObj._startLocation = {
            x: et.pageX,
            y: et.pageY
        };
        eventObj._isStart = true;

        
    },
    CarouselTouchMove (e){
       console.log(e.touches.length)
          if (e.touches.length > 1 || e.scale && e.scale !== 1) {
                return;
            }
            let that = this,
                props = that,
                et = e.touches[0],
                _index = props.index,
                distX = et.pageX - eventObj._startLocation.x;
            if (eventObj._isStart) {
                eventObj._isStart = Math.abs(distX) > Math.abs(et.pageY - eventObj._startLocation.y); //不是上下
            }
            if (eventObj._isStart) {
                e.preventDefault();
                let i = _index,
                    elemWidth = props.sliderWidth;
                if (props.loop) {  
                    if (_index === 0 && distX > 0) {
                        i = props.list.length;
                    }
                } else {//不循环
                    distX = distX / ((_index === 0 && distX > 0 || _index == props.list.length && distX < 0) ? (Math.abs(distX) / elemWidth + 1 ) : 1 );  //增加阻力
                }
                
                props.updateState(props.updateUlStyle({
                        ulPositionOffset:-(elemWidth * (i - distX / elemWidth))
                    },true))
                eventObj._distX = distX;
            }

    },
    CarouselTouchEnd (e){
        let props = this,
            index = props.index;
        eventObj._isUpdateEnd = true;
        if (eventObj._isStart) {
             e.preventDefault();
            index =  eventObj._distX < 0 ? index + 1 : index - 1;
            props.to(index)
        }
        props.startSlider()
    }
}